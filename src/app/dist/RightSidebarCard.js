(function(React2, react) {
  "use strict";
  function extend_V2(renderExtensionCallback) {
    return self.extend_V2(renderExtensionCallback);
  }
  function serverless(name, options) {
    return self.serverless(name, options);
  }
  function fetch$1(url, options) {
    return self.hsFetch(url, options);
  }
  const hubspot = {
    extend: extend_V2,
    serverless,
    fetch: fetch$1
  };
  react.createRemoteReactComponent("Alert");
  const Button = react.createRemoteReactComponent("Button", {
    fragmentProps: ["overlay"]
  });
  const ButtonRow = react.createRemoteReactComponent("ButtonRow");
  const Card = react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  const Divider = react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("Input");
  const Link = react.createRemoteReactComponent("Link", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  const Tag = react.createRemoteReactComponent("Tag", {
    fragmentProps: ["overlay"]
  });
  const Text = react.createRemoteReactComponent("Text");
  const Tile = react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  const Flex = react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  react.createRemoteReactComponent("Checkbox");
  react.createRemoteReactComponent("RadioButton");
  react.createRemoteReactComponent("List");
  react.createRemoteReactComponent("Toggle");
  react.createRemoteReactComponent("Dropdown");
  react.createRemoteReactComponent("Panel");
  react.createRemoteReactComponent("PanelFooter");
  react.createRemoteReactComponent("PanelBody");
  react.createRemoteReactComponent("PanelSection");
  react.createRemoteReactComponent("StepperInput");
  react.createRemoteReactComponent("Modal");
  react.createRemoteReactComponent("ModalBody");
  react.createRemoteReactComponent("ModalFooter");
  react.createRemoteReactComponent("Icon");
  react.createRemoteReactComponent("StatusTag");
  react.createRemoteReactComponent("LoadingButton", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("BarChart");
  react.createRemoteReactComponent("LineChart");
  react.createRemoteReactComponent("Tabs");
  react.createRemoteReactComponent("Tab");
  react.createRemoteReactComponent("Illustration");
  react.createRemoteReactComponent("Tooltip");
  react.createRemoteReactComponent("SearchInput");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  const buildQuery = (params) => Object.entries(params).map(([key, val]) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join("&");
  const DynamicCard = ({ context }) => {
    const [data, setData] = React2.useState(null);
    React2.useEffect(() => {
      const fetchData = async () => {
        var _a, _b, _c, _d;
        const params = {
          userId: context.user.id,
          userEmail: context.user.email,
          associatedObjectId: context.crm.objectId,
          associatedObjectType: context.crm.objectTypeId,
          portalId: context.portal.id,
          firstname: context.user.firstName,
          lastname: context.user.lastName,
          phone: (_b = (_a = context.object) == null ? void 0 : _a.properties) == null ? void 0 : _b.phone,
          email: context.user.email,
          mobilephone: (_d = (_c = context.object) == null ? void 0 : _c.properties) == null ? void 0 : _d.mobilephone
        };
        const url = `https://whatsapp-integration.transfunnel.io/react/crm-card-react.php?${buildQuery(params)}`;
        const res = await fetch(url);
        const json = await res.json();
        setData(json[params.portalId]);
      };
      fetchData();
    }, [context]);
    if (!data)
      return /* @__PURE__ */ React2.createElement(Text, null, "Loading...");
    const billing = data.billing;
    const guides = data.guides;
    const frames = data.frames;
    return /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "md" }, /* @__PURE__ */ React2.createElement(Card, null, /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "xs" }, /* @__PURE__ */ React2.createElement(Tile, { compact: true }, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "WhatsApp Integration"), /* @__PURE__ */ React2.createElement(Text, null, "WhatsApp Integration by TransFunnel Consulting"), /* @__PURE__ */ React2.createElement(Flex, { align: "center", gap: "xs" }, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Subscription Status:"), /* @__PURE__ */ React2.createElement(Tag, { variant: billing.status === "Active" ? "success" : "warning" }, billing.status)), /* @__PURE__ */ React2.createElement(Flex, { gap: "xs" }, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Billing Period:"), /* @__PURE__ */ React2.createElement(Text, null, billing.period)), /* @__PURE__ */ React2.createElement(Flex, { gap: "xs" }, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Amount:"), /* @__PURE__ */ React2.createElement(Text, null, "$", billing.amount))))), /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "small" }, /* @__PURE__ */ React2.createElement(Tile, { compact: true }, /* @__PURE__ */ React2.createElement(Link, { href: guides.setup, target: "_blank" }, "Integration Setup Guide"), /* @__PURE__ */ React2.createElement(Text, null, "Setup Guide for WhatsApp Integration")), /* @__PURE__ */ React2.createElement(Tile, { compact: true }, /* @__PURE__ */ React2.createElement(Link, { href: guides.templates, target: "_blank" }, "Templates Guide"), /* @__PURE__ */ React2.createElement(Text, null, "Templates Guide for Twilio Content Template Builder"))), /* @__PURE__ */ React2.createElement(Flex, { gap: "md", justify: "center" }, /* @__PURE__ */ React2.createElement(ButtonRow, { dropDownButtonOptions: { size: "sm" } }, /* @__PURE__ */ React2.createElement(
      Button,
      {
        size: "sm",
        type: "button",
        variant: "primary",
        onClick: () => window.open(frames.form.url, "_blank")
      },
      frames.form.label
    ), /* @__PURE__ */ React2.createElement(
      Button,
      {
        size: "sm",
        type: "button",
        variant: "secondary",
        onClick: () => window.open(frames.conversation.url, "_blank")
      },
      frames.conversation.label
    ))), /* @__PURE__ */ React2.createElement(Divider, null), /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "small" }, /* @__PURE__ */ React2.createElement(Tile, { compact: true }, /* @__PURE__ */ React2.createElement(Link, { href: frames.customerPortal.url, target: "_blank", size: "small", format: { fontWeight: "bold" } }, frames.customerPortal.label))));
  };
  hubspot.extend(({ context }) => /* @__PURE__ */ React2.createElement(DynamicCard, { context }));
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
