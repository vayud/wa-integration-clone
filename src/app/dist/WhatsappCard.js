(function(React2, react) {
  "use strict";
  function extend_V2(renderExtensionCallback) {
    return self.extend_V2(renderExtensionCallback);
  }
  function serverless(name, options) {
    return self.serverless(name, options);
  }
  function fetch(url, options) {
    return self.hsFetch(url, options);
  }
  const hubspot = {
    extend: extend_V2,
    serverless,
    fetch
  };
  react.createRemoteReactComponent("Alert");
  const Button = react.createRemoteReactComponent("Button", {
    fragmentProps: ["overlay"]
  });
  const ButtonRow = react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  const ErrorState = react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("Input");
  const Link = react.createRemoteReactComponent("Link", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  const LoadingSpinner = react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  const Tag = react.createRemoteReactComponent("Tag", {
    fragmentProps: ["overlay"]
  });
  const Text = react.createRemoteReactComponent("Text");
  const Tile = react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  const Flex = react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  react.createRemoteReactComponent("Checkbox");
  react.createRemoteReactComponent("RadioButton");
  react.createRemoteReactComponent("List");
  react.createRemoteReactComponent("Toggle");
  react.createRemoteReactComponent("Dropdown");
  react.createRemoteReactComponent("Panel");
  react.createRemoteReactComponent("PanelFooter");
  react.createRemoteReactComponent("PanelBody");
  react.createRemoteReactComponent("PanelSection");
  react.createRemoteReactComponent("StepperInput");
  react.createRemoteReactComponent("Modal");
  react.createRemoteReactComponent("ModalBody");
  react.createRemoteReactComponent("ModalFooter");
  react.createRemoteReactComponent("Icon");
  react.createRemoteReactComponent("StatusTag");
  react.createRemoteReactComponent("LoadingButton", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("BarChart");
  react.createRemoteReactComponent("LineChart");
  react.createRemoteReactComponent("Tabs");
  react.createRemoteReactComponent("Tab");
  react.createRemoteReactComponent("Illustration");
  react.createRemoteReactComponent("Tooltip");
  react.createRemoteReactComponent("SearchInput");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  const STATUS_VARIANT_MAP = {
    Active: "success",
    Cancelled: "danger",
    Trialing: "info",
    Paused: "warning",
    Inactive: "default"
  };
  const DynamicCard = ({ context, fetchCrmObjectProperties, openIframe }) => {
    const [data, setData] = React2.useState(null);
    const [contactProperties, setContactProperties] = React2.useState({});
    React2.useEffect(() => {
      const loadProperties = async () => {
        try {
          const props = await fetchCrmObjectProperties(["email", "phone", "mobilephone"]);
          setContactProperties(props);
        } catch (err) {
          console.error("Error fetching CRM properties", err);
        }
      };
      loadProperties();
    }, [fetchCrmObjectProperties]);
    React2.useEffect(() => {
      if (!contactProperties.phone && !contactProperties.mobilephone && !contactProperties.email)
        return;
      const fetchData = async () => {
        const params = {
          userId: context.user.id,
          userEmail: context.user.email,
          associatedObjectId: context.crm.objectId,
          associatedObjectType: context.crm.objectTypeId,
          portalId: context.portal.id,
          firstname: context.user.firstName,
          lastname: context.user.lastName,
          email: contactProperties.email,
          phone: contactProperties.phone,
          mobilephone: contactProperties.mobilephone
        };
        const url = `https://whatsapp-integration.transfunnel.io/api/crm-card.php`;
        try {
          const response = await hubspot.fetch(url, {
            timeout: 2e3,
            method: "POST",
            body: params
          });
          const data2 = await response.json();
          if (data2.status === "error") {
            setData({ error: data2.message });
            return;
          }
          setData(data2[params.portalId]);
        } catch (err) {
          console.error("Something went wrong", err);
        }
      };
      fetchData();
    }, [context, contactProperties]);
    if (!data)
      return /* @__PURE__ */ React2.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    const billing = data.billing;
    const frames = data.frames;
    const guides = data.guides;
    if (data && data.error) {
      return /* @__PURE__ */ React2.createElement(ErrorState, { title: "Something went wrong." });
    }
    return /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "lg" }, /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "sm" }, /* @__PURE__ */ React2.createElement(Tile, { compact: true }, /* @__PURE__ */ React2.createElement(Flex, { gap: "xs" }, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Subscription Status:"), /* @__PURE__ */ React2.createElement(Tag, { variant: STATUS_VARIANT_MAP[billing.status] || "default" }, billing.status)), /* @__PURE__ */ React2.createElement(Flex, { gap: "xs" }, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Billing Period:"), /* @__PURE__ */ React2.createElement(Text, null, billing.period)), /* @__PURE__ */ React2.createElement(Flex, { gap: "xs" }, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Amount:"), /* @__PURE__ */ React2.createElement(Text, null, "$", billing.amount))), /* @__PURE__ */ React2.createElement(Tile, { compact: true }, /* @__PURE__ */ React2.createElement(Link, { href: guides.setup, target: "_blank" }, "Integration Setup Guide")), /* @__PURE__ */ React2.createElement(Tile, { compact: true }, /* @__PURE__ */ React2.createElement(Link, { href: guides.templates, target: "_blank" }, "Templates Guide"))), /* @__PURE__ */ React2.createElement(Flex, { gap: "md", justify: "center" }, /* @__PURE__ */ React2.createElement(ButtonRow, { dropDownButtonOptions: { size: "sm" } }, /* @__PURE__ */ React2.createElement(
      Button,
      {
        size: "sm",
        type: "button",
        variant: "primary",
        onClick: () => openIframe({
          uri: frames.form.url,
          title: frames.form.label,
          width: frames.form.width,
          height: frames.form.height
        })
      },
      frames.form.label
    ), /* @__PURE__ */ React2.createElement(
      Button,
      {
        size: "sm",
        type: "button",
        variant: "secondary",
        onClick: () => openIframe({
          uri: frames.conversation.url,
          title: frames.conversation.label,
          width: frames.conversation.width,
          height: frames.conversation.height
        })
      },
      frames.conversation.label
    ))));
  };
  hubspot.extend(({ context, actions }) => /* @__PURE__ */ React2.createElement(
    DynamicCard,
    {
      context,
      openIframe: actions.openIframeModal,
      fetchCrmObjectProperties: actions.fetchCrmObjectProperties
    }
  ));
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
