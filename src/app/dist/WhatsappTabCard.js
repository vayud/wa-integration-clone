this.WhatsappTabCard = this.WhatsappTabCard || {};
this.WhatsappTabCard.js = function(react$1, react) {
  "use strict";
  function extend_V2(renderExtensionCallback) {
    return self.extend_V2(renderExtensionCallback);
  }
  function serverless(name, options) {
    return self.serverless(name, options);
  }
  function fetch(url, options) {
    return self.hsFetch(url, options);
  }
  const hubspot = {
    extend: extend_V2,
    serverless,
    fetch
  };
  react.createRemoteReactComponent("Alert");
  react.createRemoteReactComponent("Button", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  react.createRemoteReactComponent("Divider");
  const EmptyState = react.createRemoteReactComponent("EmptyState");
  const ErrorState = react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("Input");
  react.createRemoteReactComponent("Link", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  const LoadingSpinner = react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag", {
    fragmentProps: ["overlay"]
  });
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  const StatisticsItem = react.createRemoteReactComponent("StatisticsItem");
  const Statistics = react.createRemoteReactComponent("Statistics");
  const StatisticsTrend = react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  const Flex = react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  react.createRemoteReactComponent("Checkbox");
  react.createRemoteReactComponent("RadioButton");
  react.createRemoteReactComponent("List");
  react.createRemoteReactComponent("Toggle");
  react.createRemoteReactComponent("Dropdown");
  react.createRemoteReactComponent("Panel");
  react.createRemoteReactComponent("PanelFooter");
  react.createRemoteReactComponent("PanelBody");
  react.createRemoteReactComponent("PanelSection");
  react.createRemoteReactComponent("StepperInput");
  react.createRemoteReactComponent("Modal");
  react.createRemoteReactComponent("ModalBody");
  react.createRemoteReactComponent("ModalFooter");
  react.createRemoteReactComponent("Icon");
  react.createRemoteReactComponent("StatusTag");
  react.createRemoteReactComponent("LoadingButton", {
    fragmentProps: ["overlay"]
  });
  const BarChart = react.createRemoteReactComponent("BarChart");
  const LineChart = react.createRemoteReactComponent("LineChart");
  const Tabs = react.createRemoteReactComponent("Tabs");
  const Tab = react.createRemoteReactComponent("Tab");
  react.createRemoteReactComponent("Illustration");
  react.createRemoteReactComponent("Tooltip");
  react.createRemoteReactComponent("SearchInput");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  const StatsTab = ({ data }) => {
    console.log("stats data: ", data);
    if (!data)
      return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    if (data.error)
      return /* @__PURE__ */ React.createElement(ErrorState, { title: "Something went wrong.", message: data.error });
    if (data.empty)
      return /* @__PURE__ */ React.createElement(EmptyState, { title: "Nothing here yet", layout: "vertical", reverseOrder: true }, /* @__PURE__ */ React.createElement(Text, null, data.message));
    return /* @__PURE__ */ React.createElement(Statistics, null, ["sent", "failed", "received"].map((type) => {
      var _a, _b, _c, _d;
      return /* @__PURE__ */ React.createElement(
        StatisticsItem,
        {
          key: type,
          label: type.charAt(0).toUpperCase() + type.slice(1),
          number: ((_a = data == null ? void 0 : data[type]) == null ? void 0 : _a.this_month) ?? 0
        },
        ((_c = (_b = data == null ? void 0 : data[type]) == null ? void 0 : _b.change) == null ? void 0 : _c.type) !== "none" && /* @__PURE__ */ React.createElement(StatisticsTrend, { direction: data[type].change.type, value: `${data[type].change.change ?? 0}%` }),
        /* @__PURE__ */ React.createElement(Text, { variant: "caption" }, "Last month: ", ((_d = data == null ? void 0 : data[type]) == null ? void 0 : _d.last_month) ?? 0)
      );
    }));
  };
  const TrendsTab = ({ data }) => {
    console.log("trends data: ", data);
    if (!data)
      return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    if (data.error)
      return /* @__PURE__ */ React.createElement(ErrorState, { title: "Something went wrong.", message: data.error });
    if (data.empty)
      return /* @__PURE__ */ React.createElement(EmptyState, { title: "Nothing here yet", layout: "vertical", reverseOrder: true }, /* @__PURE__ */ React.createElement(Text, null, data.message));
    const chartData = data.flatMap((row) => [
      { Month: row.month, Metric: "Sent", Count: row.sent },
      { Month: row.month, Metric: "Failed", Count: row.failed },
      { Month: row.month, Metric: "Received", Count: row.received }
    ]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      LineChart,
      {
        data: chartData,
        axes: {
          x: { field: "Month", fieldType: "category" },
          y: { field: "Count", fieldType: "linear" },
          options: { groupFieldByColor: "Metric" }
        },
        options: {
          showLegend: true,
          showDataLabels: true,
          colorList: ["darkGreen", "darkOrange", "darkBlue"]
        }
      }
    ), /* @__PURE__ */ React.createElement(Flex, { direction: "column", align: "center" }, /* @__PURE__ */ React.createElement(Text, { variant: "microcopy" }, "The chart displays a monthly breakdown of WhatsApp messages for this contact, covering up to the last 12 months.")));
  };
  const DistributionTab = ({ data }) => {
    console.log("distribution data: ", data);
    if (!data)
      return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    if (data.error)
      return /* @__PURE__ */ React.createElement(ErrorState, { title: "Something went wrong.", message: data.error });
    if (data.empty)
      return /* @__PURE__ */ React.createElement(EmptyState, { title: "Nothing here yet", layout: "vertical", reverseOrder: true }, /* @__PURE__ */ React.createElement(Text, null, data.message));
    const chartData = Object.entries(data).map(([type, count]) => ({ type, count }));
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      BarChart,
      {
        data: chartData,
        axes: {
          x: { field: "type", fieldType: "category", label: "Template Type" },
          y: { field: "count", fieldType: "linear", label: "Count" },
          options: {
            groupFieldByColor: "type",
            colors: {
              "Call to action": "darkBlue",
              Card: "purple",
              Carousel: "orange",
              Media: "darkGreen",
              "Quick reply": "darkOrange",
              Text: "aqua"
            }
          }
        },
        options: {
          showLegend: true,
          showDataLabels: true
        }
      }
    ), /* @__PURE__ */ React.createElement(Flex, { direction: "column", align: "center" }, /* @__PURE__ */ React.createElement(Text, { variant: "microcopy" }, "The chart displays the distribution of WhatsApp message templates sent to this contact, grouped by template type.")));
  };
  const CombinedCard = ({ context }) => {
    const [selectedTab, setSelectedTab] = react$1.useState("stats");
    const [tabData, setTabData] = react$1.useState({
      stats: { loading: true, data: null, error: null },
      trends: { loading: false, data: null, error: null },
      distribution: { loading: false, data: null, error: null }
    });
    const buildQuery = (params) => Object.entries(params).filter(([_, val]) => val != null && val !== "").map(([key, val]) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join("&");
    const fetchTabData = async (key, action) => {
      const responseKeyMap = {
        stats: "stats",
        trends: "trends",
        distribution: "distribution"
      };
      setTabData((prev) => ({
        ...prev,
        [key]: { loading: true, data: null, error: null }
      }));
      try {
        const url = `https://whatsapp-integration.transfunnel.io/api/contact-stats.php?${buildQuery({
          action,
          associatedObjectId: context.crm.objectId
        })}`;
        const res = await hubspot.fetch(url, { timeout: 2e3 });
        const json = await res.json();
        console.log("API response:", json);
        const resKey = responseKeyMap[key];
        if (json.status === "error" || !json[resKey]) {
          setTabData((prev) => ({
            ...prev,
            [key]: { loading: false, data: null, error: json.message || "Invalid data" }
          }));
        } else if (json.status === "empty") {
          setTabData((prev) => ({
            ...prev,
            [key]: { loading: false, data: "empty", error: json.message }
          }));
        } else {
          setTabData((prev) => ({
            ...prev,
            [key]: { loading: false, data: json[resKey], error: null }
          }));
        }
      } catch (err) {
        setTabData((prev) => ({
          ...prev,
          [key]: { loading: false, data: null, error: "Fetch failed" }
        }));
      }
    };
    react$1.useEffect(() => {
      fetchTabData("stats", "monthly-counts");
    }, []);
    const handleTabChange = (tabId) => {
      setSelectedTab(tabId);
      const actionMap = {
        stats: "monthly-counts",
        trends: "monthly-trends",
        distribution: "template-types"
      };
      if (!tabData[tabId].data && !tabData[tabId].loading) {
        fetchTabData(tabId, actionMap[tabId]);
      }
    };
    const renderTabContent = (key, Component) => {
      const { loading, data, error } = tabData[key];
      if (selectedTab !== key && !data && !loading && !error)
        return null;
      if (loading)
        return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
      if (error)
        return /* @__PURE__ */ React.createElement(ErrorState, { title: "Error", message: error });
      if (data === "empty")
        return /* @__PURE__ */ React.createElement(EmptyState, { title: "No Data" }, /* @__PURE__ */ React.createElement(Text, null, error));
      console.log("renderTabContent", key, { loading, data, error });
      return /* @__PURE__ */ React.createElement(Component, { data });
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Tabs, { defaultSelected: "stats", onSelectedChange: handleTabChange }, /* @__PURE__ */ React.createElement(Tab, { tabId: "stats", title: "Message Stats", tooltip: "View message statistics for this contact", tooltipPlacement: "bottom" }), /* @__PURE__ */ React.createElement(Tab, { tabId: "trends", title: "Message Trends", tooltip: "View monthly message trends for this contact", tooltipPlacement: "bottom" }), /* @__PURE__ */ React.createElement(Tab, { tabId: "distribution", title: "Template Distribution", tooltip: "View template distribution for this contact", tooltipPlacement: "bottom" })), selectedTab === "stats" && renderTabContent("stats", StatsTab), selectedTab === "trends" && renderTabContent("trends", TrendsTab), selectedTab === "distribution" && renderTabContent("distribution", DistributionTab));
  };
  hubspot.extend(({ context }) => /* @__PURE__ */ React.createElement(CombinedCard, { context }));
  return CombinedCard;
}(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
