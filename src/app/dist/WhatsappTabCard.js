this.WhatsappTabCard = this.WhatsappTabCard || {};
this.WhatsappTabCard.js = function(react$1, react) {
  "use strict";
  function extend_V2(renderExtensionCallback) {
    return self.extend_V2(renderExtensionCallback);
  }
  function serverless(name, options) {
    return self.serverless(name, options);
  }
  function fetch(url, options) {
    return self.hsFetch(url, options);
  }
  const hubspot = {
    extend: extend_V2,
    serverless,
    fetch
  };
  react.createRemoteReactComponent("Alert");
  react.createRemoteReactComponent("Button", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  const DescriptionList = react.createRemoteReactComponent("DescriptionList");
  const DescriptionListItem = react.createRemoteReactComponent("DescriptionListItem");
  const Divider = react.createRemoteReactComponent("Divider");
  const EmptyState = react.createRemoteReactComponent("EmptyState");
  const ErrorState = react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  const Image = react.createRemoteReactComponent("Image", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("Input");
  react.createRemoteReactComponent("Link", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  const LoadingSpinner = react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  const Tag = react.createRemoteReactComponent("Tag", {
    fragmentProps: ["overlay"]
  });
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  const StatisticsItem = react.createRemoteReactComponent("StatisticsItem");
  const Statistics = react.createRemoteReactComponent("Statistics");
  const StatisticsTrend = react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  const Accordion = react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  const Flex = react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  react.createRemoteReactComponent("Checkbox");
  react.createRemoteReactComponent("RadioButton");
  react.createRemoteReactComponent("List");
  react.createRemoteReactComponent("Toggle");
  react.createRemoteReactComponent("Dropdown");
  react.createRemoteReactComponent("Panel");
  react.createRemoteReactComponent("PanelFooter");
  react.createRemoteReactComponent("PanelBody");
  react.createRemoteReactComponent("PanelSection");
  react.createRemoteReactComponent("StepperInput");
  react.createRemoteReactComponent("Modal");
  react.createRemoteReactComponent("ModalBody");
  react.createRemoteReactComponent("ModalFooter");
  react.createRemoteReactComponent("Icon");
  react.createRemoteReactComponent("StatusTag");
  react.createRemoteReactComponent("LoadingButton", {
    fragmentProps: ["overlay"]
  });
  const BarChart = react.createRemoteReactComponent("BarChart");
  const LineChart = react.createRemoteReactComponent("LineChart");
  const Tabs = react.createRemoteReactComponent("Tabs");
  const Tab = react.createRemoteReactComponent("Tab");
  react.createRemoteReactComponent("Illustration");
  react.createRemoteReactComponent("Tooltip");
  react.createRemoteReactComponent("SearchInput");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  const StatsTab = ({ data }) => {
    if (!data)
      return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    if (data.error)
      return /* @__PURE__ */ React.createElement(ErrorState, { title: "Something went wrong.", message: data.error });
    if (data.empty)
      return /* @__PURE__ */ React.createElement(EmptyState, { title: "Nothing here yet", layout: "vertical", reverseOrder: true }, /* @__PURE__ */ React.createElement(Text, null, data.message));
    return /* @__PURE__ */ React.createElement(Statistics, null, ["sent", "failed", "received"].map((type) => {
      var _a, _b, _c, _d;
      return /* @__PURE__ */ React.createElement(
        StatisticsItem,
        {
          key: type,
          label: type.charAt(0).toUpperCase() + type.slice(1),
          number: ((_a = data == null ? void 0 : data[type]) == null ? void 0 : _a.this_month) ?? 0
        },
        ((_c = (_b = data == null ? void 0 : data[type]) == null ? void 0 : _b.change) == null ? void 0 : _c.type) !== "none" && /* @__PURE__ */ React.createElement(StatisticsTrend, { direction: data[type].change.type, value: `${data[type].change.change ?? 0}%` }),
        /* @__PURE__ */ React.createElement(Text, { variant: "caption" }, "Last month: ", ((_d = data == null ? void 0 : data[type]) == null ? void 0 : _d.last_month) ?? 0)
      );
    }));
  };
  const TrendsTab = ({ data }) => {
    console.log("trends data: ", data);
    if (!data)
      return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    if (data.error)
      return /* @__PURE__ */ React.createElement(ErrorState, { title: "Something went wrong.", message: data.error });
    if (data.empty)
      return /* @__PURE__ */ React.createElement(EmptyState, { title: "Nothing here yet", layout: "vertical", reverseOrder: true }, /* @__PURE__ */ React.createElement(Text, null, data.message));
    const chartData = data.flatMap((row) => [
      { Month: row.month, Metric: "Sent", Count: row.sent },
      { Month: row.month, Metric: "Failed", Count: row.failed },
      { Month: row.month, Metric: "Received", Count: row.received }
    ]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      LineChart,
      {
        data: chartData,
        axes: {
          x: { field: "Month", fieldType: "category" },
          y: { field: "Count", fieldType: "linear" },
          options: { groupFieldByColor: "Metric" }
        },
        options: {
          showLegend: true,
          showDataLabels: true,
          colorList: ["darkGreen", "darkOrange", "darkBlue"]
        }
      }
    ), /* @__PURE__ */ React.createElement(Flex, { direction: "column", align: "center" }, /* @__PURE__ */ React.createElement(Text, { variant: "microcopy" }, "The chart displays a monthly breakdown of WhatsApp messages for this contact, covering up to the last 12 months.")));
  };
  const STATUS_VARIANT_MAP = {
    Accepted: "info",
    Delivered: "success",
    Failed: "danger",
    Read: "success",
    Sent: "default",
    Undelivered: "warning",
    Queued: "warning"
  };
  const MessagesTab = ({ data }) => {
    if (!data)
      return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    if (data.error)
      return /* @__PURE__ */ React.createElement(ErrorState, { title: "Something went wrong.", message: data.error });
    if (data.empty)
      return /* @__PURE__ */ React.createElement(EmptyState, { title: "No messages yet", layout: "vertical", reverseOrder: true }, /* @__PURE__ */ React.createElement(Text, null, data.message));
    return /* @__PURE__ */ React.createElement(Flex, { direction: "column", gap: "xs" }, data.map((message, index) => {
      var itemTitle = message.action === "sent" ? `Message Sent | ${message.timestamp}` : `Message Received | ${message.timestamp}`;
      return /* @__PURE__ */ React.createElement(Accordion, { title: itemTitle }, /* @__PURE__ */ React.createElement(Flex, { direction: "column", gap: "sm", justify: "center", align: "center" }, /* @__PURE__ */ React.createElement(Flex, { wrap: "wrap", gap: "xs", align: "baseline" }, formatMessageComponents(message.message)), message.media_type == "image" && message.media_url && /* @__PURE__ */ React.createElement(Image, { alt: "Image", src: message.media_url })), message.action === "sent" && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(DescriptionList, { direction: "row", gap: "sm" }, /* @__PURE__ */ React.createElement(DescriptionListItem, { label: "Status" }, /* @__PURE__ */ React.createElement(Tag, { variant: STATUS_VARIANT_MAP[message.message_status] || "default" }, message.message_status || "N/A")), /* @__PURE__ */ React.createElement(DescriptionListItem, { label: "Campaign" }, /* @__PURE__ */ React.createElement(Text, null, message.campaign || "N/A")), /* @__PURE__ */ React.createElement(DescriptionListItem, { label: "Sent By" }, /* @__PURE__ */ React.createElement(Text, null, message.sent_by || "N/A")))));
    }));
  };
  const formatMessageComponents = (input) => {
    if (!input)
      return /* @__PURE__ */ React.createElement(Text, null);
    const regex = new RegExp("```.*?```|`.*?`|(?<!\\w)([*_~])(.+?)\\1(?!\\w)|> .+|([^*_~`>]+)", "gms");
    const children = [];
    let match;
    let keyCounter = 0;
    while ((match = regex.exec(input)) !== null) {
      const [fullMatch, symbol, content, plain] = match;
      if (fullMatch.startsWith("```") || fullMatch.startsWith("`") || fullMatch.startsWith(">")) {
        continue;
      }
      if (symbol && content) {
        let format = {};
        if (symbol === "*")
          format = { fontWeight: "bold" };
        else if (symbol === "_")
          format = { italic: true };
        else if (symbol === "~")
          format = { lineDecoration: "strikethrough" };
        children.push(
          /* @__PURE__ */ React.createElement(Text, { key: `f-${keyCounter++}`, inline: true, format }, content)
        );
      } else if (plain) {
        children.push(
          /* @__PURE__ */ React.createElement(Text, { key: `p-${keyCounter++}`, inline: true }, plain)
        );
      }
    }
    return /* @__PURE__ */ React.createElement(Text, null, children);
  };
  const DistributionTab = ({ data }) => {
    console.log("distribution data: ", data);
    if (!data)
      return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
    if (data.error)
      return /* @__PURE__ */ React.createElement(ErrorState, { title: "Something went wrong.", message: data.error });
    if (data.empty)
      return /* @__PURE__ */ React.createElement(EmptyState, { title: "Nothing here yet", layout: "vertical", reverseOrder: true }, /* @__PURE__ */ React.createElement(Text, null, data.message));
    const chartData = Object.entries(data).map(([type, count]) => ({ type, count }));
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      BarChart,
      {
        data: chartData,
        axes: {
          x: { field: "type", fieldType: "category", label: "Template Type" },
          y: { field: "count", fieldType: "linear", label: "Count" },
          options: {
            groupFieldByColor: "type",
            colors: {
              "Call to action": "darkBlue",
              Card: "purple",
              Carousel: "orange",
              Media: "darkGreen",
              "Quick reply": "darkOrange",
              Text: "aqua"
            }
          }
        },
        options: {
          showLegend: true,
          showDataLabels: true
        }
      }
    ), /* @__PURE__ */ React.createElement(Flex, { direction: "column", align: "center" }, /* @__PURE__ */ React.createElement(Text, { variant: "microcopy" }, "The chart displays the distribution of WhatsApp message templates sent to this contact, grouped by template type.")));
  };
  const CombinedCard = ({ context }) => {
    const [selectedTab, setSelectedTab] = react$1.useState("messages");
    const [tabData, setTabData] = react$1.useState({
      stats: { loading: false, data: null, error: null },
      trends: { loading: false, data: null, error: null },
      distribution: { loading: false, data: null, error: null },
      messages: { loading: false, data: null, error: null }
    });
    const buildQuery = (params) => Object.entries(params).filter(([_, val]) => val != null && val !== "").map(([key, val]) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join("&");
    const fetchTabData = async (key, action) => {
      const responseKeyMap = {
        stats: "stats",
        trends: "trends",
        distribution: "distribution",
        messages: "messages"
      };
      setTabData((prev) => ({
        ...prev,
        [key]: { loading: true, data: null, error: null }
      }));
      try {
        const url = `https://whatsapp-integration.transfunnel.io/api/contact-stats.php?${buildQuery({
          action,
          associatedObjectId: context.crm.objectId
        })}`;
        const res = await hubspot.fetch(url, { timeout: 2e3 });
        const json = await res.json();
        const resKey = responseKeyMap[key];
        if (json.status === "error" || !json[resKey]) {
          setTabData((prev) => ({
            ...prev,
            [key]: { loading: false, data: null, error: json.message || "Invalid data" }
          }));
        } else if (json.status === "empty") {
          setTabData((prev) => ({
            ...prev,
            [key]: { loading: false, data: "empty", error: json.message }
          }));
        } else {
          setTabData((prev) => ({
            ...prev,
            [key]: { loading: false, data: json[resKey], error: null }
          }));
        }
      } catch (err) {
        setTabData((prev) => ({
          ...prev,
          [key]: { loading: false, data: null, error: "Fetch failed" }
        }));
      }
    };
    react$1.useEffect(() => {
      fetchTabData("messages", "recent-messages");
    }, []);
    const handleTabChange = (tabId) => {
      setSelectedTab(tabId);
      const actionMap = {
        stats: "monthly-counts",
        trends: "monthly-trends",
        distribution: "template-types",
        messages: "recent-messages"
      };
      if (!tabData[tabId].data && !tabData[tabId].loading) {
        fetchTabData(tabId, actionMap[tabId]);
      }
    };
    const renderTabContent = (key, Component) => {
      const { loading, data, error } = tabData[key];
      if (selectedTab !== key && !data && !loading && !error)
        return null;
      if (loading)
        return /* @__PURE__ */ React.createElement(LoadingSpinner, { layout: "centered", size: "md", label: "Loading..." });
      if (error)
        return /* @__PURE__ */ React.createElement(ErrorState, { title: "Error", message: error });
      if (data === "empty")
        return /* @__PURE__ */ React.createElement(EmptyState, { title: "No Data" }, /* @__PURE__ */ React.createElement(Text, null, error));
      return /* @__PURE__ */ React.createElement(Component, { data });
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Tabs, { defaultSelected: "messages", onSelectedChange: handleTabChange }, /* @__PURE__ */ React.createElement(Tab, { tabId: "messages", title: "Recent Messages", tooltip: "View the last 5 messages sent/received for this contact", tooltipPlacement: "bottom" }), /* @__PURE__ */ React.createElement(Tab, { tabId: "stats", title: "Stats", tooltip: "View message statistics for this contact", tooltipPlacement: "bottom" }), /* @__PURE__ */ React.createElement(Tab, { tabId: "trends", title: "Trends", tooltip: "View monthly message trends for this contact", tooltipPlacement: "bottom" }), /* @__PURE__ */ React.createElement(Tab, { tabId: "distribution", title: "Template Usage", tooltip: "View template usage distribution for this contact", tooltipPlacement: "bottom" })), selectedTab === "messages" && renderTabContent("messages", MessagesTab), selectedTab === "stats" && renderTabContent("stats", StatsTab), selectedTab === "trends" && renderTabContent("trends", TrendsTab), selectedTab === "distribution" && renderTabContent("distribution", DistributionTab));
  };
  hubspot.extend(({ context }) => /* @__PURE__ */ React.createElement(CombinedCard, { context }));
  return CombinedCard;
}(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
